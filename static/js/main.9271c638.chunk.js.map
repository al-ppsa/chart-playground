{"version":3,"sources":["VisxTest.tsx","NivoTest.tsx","App.tsx","reportWebVitals.js","index.tsx"],"names":["VisxTest","props","width","height","radius","thickness","React","useState","showLabels","setShowLabels","Group","x","y","fill","textAnchor","top","left","data","letterFrequency","outerRadius","innerRadius","pieValue","l","frequency","s","freqMod","getColor","centroid","xy","arc","coords","adjX","adjY","letter","x1","x2","y1","y2","stroke","getCentroid","undefined","onClick","map","datum","id","label","value","color","NivoTest","marginX","marginY","style","margin","bottom","right","enableArcLinkLabels","enableArcLabels","arcLinkLabel","arcLinkLabelsTextColor","App","displayingVisx","setDisplayingVisx","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9271c638.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport Pie from '@visx/shape/lib/shapes/Pie';\r\nimport { letterFrequency } from '@visx/mock-data';\r\nimport { Group } from '@visx/group';\r\n\r\nexport interface VisxProps {\r\n    width: number;\r\n    height: number;\r\n    radius: number;\r\n    thickness: number;\r\n}\r\nexport const VisxTest = (props: VisxProps) => {\r\n    const { width, height, radius, thickness } = props;\r\n    const [showLabels, setShowLabels] = React.useState<boolean>(false);\r\n\r\n    // when rendering colors this way (vs, say, a static string \"rgb(0, 0, 255)\") I can't seem to get \r\n    // the full value. Everythign is very dull...unsure if there's some svg quirk I don't know about\r\n    const getColor = (data: {letter: string, frequency: number}) => {\r\n        const freqMod = data.frequency * 10;\r\n        const r = 150;\r\n        const g = 160; \r\n        const b = 255;\r\n        return `rgba(${r}, ${g}, ${b}, ${1 - (1 - freqMod)})`;\r\n    }\r\n\r\n    const getCentroid = (data: {letter: string, frequency: number}, coords: [x: number, y: number]) => {\r\n        const [x, y] = coords;\r\n        const [cX, cY] = [0, 0];\r\n        const [diffX, diffY] = [x-cX, y-cY];\r\n        const scale = 0.4;\r\n        const [adjX, adjY] = [x + diffX*scale, y + diffY*scale];\r\n\r\n        return (\r\n            <g>\r\n                <text \r\n                    x={adjX} \r\n                    y={adjY} \r\n                    textAnchor=\"middle\"\r\n                >\r\n                    {data.letter}\r\n                </text>\r\n                <line\r\n                    x1={x}\r\n                    x2={adjX}\r\n                    y1={y}\r\n                    y2={adjY}\r\n                    stroke=\"black\"\r\n                />\r\n            </g>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <h1>Visx Test</h1>\r\n            <p>minimal example of donut chart in visx </p>\r\n            <svg height={height} width={width}>\r\n                <Group>\r\n                    <text x={width/2} y={height/2} fill=\"white\" textAnchor=\"middle\">Donut Chart</text>\r\n                    <Pie\r\n                        top={height / 2}\r\n                        left={width / 2}\r\n                        data={letterFrequency}\r\n                        outerRadius={radius}\r\n                        innerRadius={radius - thickness}\r\n                        pieValue={l => l.frequency}\r\n                        //endAngle={Math.PI * 3 / 2}\r\n                        fill={s => getColor(s.data)}\r\n                        centroid={showLabels ? (xy, arc) => getCentroid(arc.data, xy) : undefined}\r\n                    />\r\n                </Group>\r\n            </svg>\r\n            <button onClick={() => setShowLabels(!showLabels)}>Toggle Labels</button>\r\n        </>\r\n    )\r\n}","import React from 'react';\r\nimport { Pie } from '@nivo/pie';\r\n\r\n// using visx here for their sick mock data library\r\nimport { letterFrequency } from '@visx/mock-data';\r\nconst data = letterFrequency.map(datum => ({\r\n    id: datum.letter,\r\n    label: datum.letter,\r\n    value: datum.frequency,\r\n    color: `rgba(150, 160, 255, ${1 - (1 - datum.frequency * 10)})`\r\n\r\n}))\r\n\r\nexport interface NivoProps {\r\n    width: number;\r\n    height: number;\r\n    radius: number;\r\n    thickness: number;\r\n}\r\n\r\nexport const NivoTest = (props: NivoProps) => {\r\n    const {height, width, radius, thickness} = props;\r\n    const [showLabels, setShowLabels] = React.useState<boolean>(false);\r\n\r\n    const marginX: number = (width / 2) - radius;\r\n    const marginY: number = (height / 2) - radius;\r\n\r\n    return (\r\n        <>\r\n            <h1>Nivo Test</h1>\r\n            <p>minimal example of donut chart in visx </p>\r\n            <div style={{ height: height, width: width }}>\r\n                <Pie\r\n                    height={height}\r\n                    width={width}\r\n                    innerRadius={ 1 - (thickness / radius)}\r\n                    data={data}\r\n                    margin={{top: marginY, left: marginX, bottom: marginY, right: marginX}}\r\n                    enableArcLinkLabels={showLabels}\r\n                    enableArcLabels={false}\r\n                    arcLinkLabel={'label'}\r\n                    arcLinkLabelsTextColor={'#fff'}\r\n                    // christ this is an awful statement\r\n                    //colors={datum => data.find((d) => d.id = datum.id.toString())?.color || 'blue'}\r\n                \r\n                />\r\n\r\n            </div>\r\n            <button onClick={() => setShowLabels(!showLabels)}>Toggle Labels</button>\r\n        </>\r\n    )\r\n}","import logo from './logo.svg';\nimport React, { useState } from 'react';\nimport { VisxTest } from './VisxTest';\nimport { NivoTest } from './NivoTest';\nimport './App.css';\n\nconst width: number = 600;\nconst height: number = 600;\nconst radius: number = 200;\nconst thickness: number = 40;\n\nfunction App() {\n  const [displayingVisx, setDisplayingVisx] = useState<boolean>(false);\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <button onClick={() => setDisplayingVisx(!displayingVisx)}>toggle library</button>\n        {displayingVisx\n        ? <VisxTest \n            height={height}\n            width={width}\n            radius={radius}\n            thickness={thickness}\n          />\n        : <NivoTest \n            height={height}\n            width={width}\n            radius={radius}\n            thickness={thickness}\n          />\n      }\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}